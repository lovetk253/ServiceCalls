/*
 * Created on 2018-10-01 ( Date ISO 2018-10-01 - Time 16:23:36 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package org.demo.controller;

import org.demo.entity.ServiceRequestActions;
import org.demo.service.ServiceRequestActionsServiceImpl;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.http.MediaType;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(value = "/serviceRequestActions", produces = "application/hal+json")
public class ServiceRequestActionsController {

	private static final Logger LOGGER = LoggerFactory.getLogger(ServiceRequestActionsController.class);

	private static final String NOT_FOUND ="ServiceRequestActions not found";

	@Autowired
	private ServiceRequestActionsServiceImpl serviceRequestActionsService;

	@RequestMapping(value = "/",
			produces = { MediaType.APPLICATION_JSON_VALUE })
	public List<ServiceRequestActions> findAll() {
		List<ServiceRequestActions> list = serviceRequestActionsService.findAll();
		return list;
	}


	@GetMapping("{responseId}")
	public ServiceRequestActions get(@PathVariable("responseId") Integer responseId) {
		final ServiceRequestActions serviceRequestActions = serviceRequestActionsService.getOne(responseId);
		LOGGER.info("ServiceRequestActions found : {}", serviceRequestActions);
		return serviceRequestActions;
	}

	@PostMapping(consumes = "application/json")
	public ServiceRequestActions create(@RequestBody ServiceRequestActions serviceRequestActions) {
		LOGGER.info("ServiceRequestActions creation request : {}", serviceRequestActions);
		if (serviceRequestActionsService.exist(serviceRequestActions)) {
			LOGGER.info("ServiceRequestActions already exist ! : {}", serviceRequestActions);
			return null;
		} else {
			final ServiceRequestActions created = serviceRequestActionsService.create(serviceRequestActions);
			LOGGER.info("Created serviceRequestActions {}", created);
			return created;
		}
	}

	@PutMapping(value = "{responseId}", consumes = "application/json")
	public ServiceRequestActions update(@PathVariable("responseId") Integer responseId, @RequestBody ServiceRequestActions serviceRequestActions) {
		return serviceRequestActionsService.update(serviceRequestActions);
	}

	@DeleteMapping("{responseId}")
	public void delete(@PathVariable("responseId") Integer responseId) {
		LOGGER.info("ServiceRequestActions deletion request : {}", resolveIdForLogger(responseId));
		if (serviceRequestActionsService.delete(responseId)) {
			LOGGER.info("ServiceRequestActions successfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer responseId) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(responseId));
		return ids.toString();
	}

}

