/*
 * Created on 2018-10-01 ( Date ISO 2018-10-01 - Time 16:23:36 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package org.demo.controller;

import org.demo.entity.Contacts;
import org.demo.service.ContactsServiceImpl;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.http.MediaType;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(value = "/contacts", produces = "application/hal+json")
public class ContactsController {

	private static final Logger LOGGER = LoggerFactory.getLogger(ContactsController.class);

	private static final String NOT_FOUND ="Contacts not found";

	@Autowired
	private ContactsServiceImpl contactsService;

	@RequestMapping(value = "/",
			produces = { MediaType.APPLICATION_JSON_VALUE })
	public List<Contacts> findAll() {
		List<Contacts> list = contactsService.findAll();
		return list;
	}


	@GetMapping("{contactId}")
	public Contacts get(@PathVariable("contactId") Integer contactId) {
		final Contacts contacts = contactsService.getOne(contactId);
		LOGGER.info("Contacts found : {}", contacts);
		return contacts;
	}

	@PostMapping(consumes = "application/json")
	public Contacts create(@RequestBody Contacts contacts) {
		LOGGER.info("Contacts creation request : {}", contacts);
		if (contactsService.exist(contacts)) {
			LOGGER.info("Contacts already exist ! : {}", contacts);
			return null;
		} else {
			final Contacts created = contactsService.create(contacts);
			LOGGER.info("Created contacts {}", created);
			return created;
		}
	}

	@PutMapping(value = "{contactId}", consumes = "application/json")
	public Contacts update(@PathVariable("contactId") Integer contactId, @RequestBody Contacts contacts) {
		return contactsService.update(contacts);
	}

	@DeleteMapping("{contactId}")
	public void delete(@PathVariable("contactId") Integer contactId) {
		LOGGER.info("Contacts deletion request : {}", resolveIdForLogger(contactId));
		if (contactsService.delete(contactId)) {
			LOGGER.info("Contacts successfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer contactId) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(contactId));
		return ids.toString();
	}

}

