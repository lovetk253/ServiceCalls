/*
 * Created on 2018-10-01 ( Date ISO 2018-10-01 - Time 16:23:36 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package org.demo.controller;

import org.demo.entity.Technicians;
import org.demo.service.TechniciansServiceImpl;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.http.MediaType;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(value = "/technicians", produces = "application/hal+json")
public class TechniciansController {

	private static final Logger LOGGER = LoggerFactory.getLogger(TechniciansController.class);

	private static final String NOT_FOUND ="Technicians not found";

	@Autowired
	private TechniciansServiceImpl techniciansService;

	@RequestMapping(value = "/",
			produces = { MediaType.APPLICATION_JSON_VALUE })
	public List<Technicians> findAll() {
		List<Technicians> list = techniciansService.findAll();
		return list;
	}


	@GetMapping("{technicianId}")
	public Technicians get(@PathVariable("technicianId") Integer technicianId) {
		final Technicians technicians = techniciansService.getOne(technicianId);
		LOGGER.info("Technicians found : {}", technicians);
		return technicians;
	}

	@PostMapping(consumes = "application/json")
	public Technicians create(@RequestBody Technicians technicians) {
		LOGGER.info("Technicians creation request : {}", technicians);
		if (techniciansService.exist(technicians)) {
			LOGGER.info("Technicians already exist ! : {}", technicians);
			return null;
		} else {
			final Technicians created = techniciansService.create(technicians);
			LOGGER.info("Created technicians {}", created);
			return created;
		}
	}

	@PutMapping(value = "{technicianId}", consumes = "application/json")
	public Technicians update(@PathVariable("technicianId") Integer technicianId, @RequestBody Technicians technicians) {
		return techniciansService.update(technicians);
	}

	@DeleteMapping("{technicianId}")
	public void delete(@PathVariable("technicianId") Integer technicianId) {
		LOGGER.info("Technicians deletion request : {}", resolveIdForLogger(technicianId));
		if (techniciansService.delete(technicianId)) {
			LOGGER.info("Technicians successfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer technicianId) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(technicianId));
		return ids.toString();
	}

}

