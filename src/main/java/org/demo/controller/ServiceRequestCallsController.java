/*
 * Created on 2018-10-01 ( Date ISO 2018-10-01 - Time 16:23:36 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package org.demo.controller;

import org.demo.entity.ServiceRequestCalls;
import org.demo.service.ServiceRequestCallsServiceImpl;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.http.MediaType;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(value = "/serviceRequestCalls", produces = "application/hal+json")
public class ServiceRequestCallsController {

	private static final Logger LOGGER = LoggerFactory.getLogger(ServiceRequestCallsController.class);

	private static final String NOT_FOUND ="ServiceRequestCalls not found";

	@Autowired
	private ServiceRequestCallsServiceImpl serviceRequestCallsService;

	@RequestMapping(value = "/",
			produces = { MediaType.APPLICATION_JSON_VALUE })
	public List<ServiceRequestCalls> findAll() {
		List<ServiceRequestCalls> list = serviceRequestCallsService.findAll();
		return list;
	}


	@GetMapping("{callId}")
	public ServiceRequestCalls get(@PathVariable("callId") Integer callId) {
		final ServiceRequestCalls serviceRequestCalls = serviceRequestCallsService.getOne(callId);
		LOGGER.info("ServiceRequestCalls found : {}", serviceRequestCalls);
		return serviceRequestCalls;
	}

	@PostMapping(consumes = "application/json")
	public ServiceRequestCalls create(@RequestBody ServiceRequestCalls serviceRequestCalls) {
		LOGGER.info("ServiceRequestCalls creation request : {}", serviceRequestCalls);
		if (serviceRequestCallsService.exist(serviceRequestCalls)) {
			LOGGER.info("ServiceRequestCalls already exist ! : {}", serviceRequestCalls);
			return null;
		} else {
			final ServiceRequestCalls created = serviceRequestCallsService.create(serviceRequestCalls);
			LOGGER.info("Created serviceRequestCalls {}", created);
			return created;
		}
	}

	@PutMapping(value = "{callId}", consumes = "application/json")
	public ServiceRequestCalls update(@PathVariable("callId") Integer callId, @RequestBody ServiceRequestCalls serviceRequestCalls) {
		return serviceRequestCallsService.update(serviceRequestCalls);
	}

	@DeleteMapping("{callId}")
	public void delete(@PathVariable("callId") Integer callId) {
		LOGGER.info("ServiceRequestCalls deletion request : {}", resolveIdForLogger(callId));
		if (serviceRequestCallsService.delete(callId)) {
			LOGGER.info("ServiceRequestCalls successfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer callId) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(callId));
		return ids.toString();
	}

}

